apiVersion: batch/v1
kind: Job
metadata:
  name: {{ k8s.job.name | default('madengine-execution') }}
  namespace: {{ k8s.namespace | default('madengine') }}
  labels:
    app.kubernetes.io/name: madengine
    app.kubernetes.io/component: execution
    app.kubernetes.io/version: {{ generation.version | default('1.0.0') }}
    environment: {{ environment | default('default') }}
  annotations:
    generated-on: "{{ generation.timestamp }}"
    registry: "{{ registry | default('local') }}"
    gpu-vendor: "{{ gpu_vendor | default('unknown') }}"
spec:
  parallelism: {{ k8s.job.parallelism | default(1) }}
  completions: {{ k8s.job.completions | default(1) }}
  backoffLimit: {{ k8s.job.backoff_limit | default(3) }}
  activeDeadlineSeconds: {{ k8s.job.active_deadline_seconds | default(14400) }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: madengine
        app.kubernetes.io/component: execution
        job-name: {{ k8s.job.name | default('madengine-execution') }}
    spec:
      restartPolicy: {{ k8s.job.restart_policy | default('Never') }}
      
      {% if k8s.service_account %}
      serviceAccountName: {{ k8s.service_account }}
      {% endif %}
      
      {% if k8s.image_pull_secrets %}
      imagePullSecrets:
        {% for secret in k8s.image_pull_secrets %}
        - name: {{ secret }}
        {% endfor %}
      {% endif %}
      
      containers:
      - name: madengine-runner
        image: {{ k8s.container.image | default('madengine/distributed-runner:latest') }}
        imagePullPolicy: {{ k8s.container.image_pull_policy | default('IfNotPresent') }}
        
        command: ["/bin/bash"]
        args: 
          - "-c"
          - |
            set -e
            echo "Starting MADEngine execution..."
            
            # Set up environment
            export PYTHONPATH=/usr/local/lib/python3.8/site-packages:$PYTHONPATH
            
            # Make script executable
            chmod +x /config/execute_models.py
            
            # Execute the models
            python3 /config/execute_models.py
            
            # Copy results to shared volume if available
            if [ -d "/results" ]; then
              cp -v *.csv *.json *.log /results/ 2>/dev/null || echo "No results to copy"
            fi
            
            echo "MADEngine execution completed"
        
        volumeMounts:
        - name: config-volume
          mountPath: /config
          readOnly: true
        - name: docker-socket
          mountPath: /var/run/docker.sock
        {% if k8s.volumes.shared_storage %}
        - name: shared-storage
          mountPath: /results
        {% endif %}
        {% if k8s.volumes.data_storage %}
        - name: data-storage
          mountPath: /data
        {% endif %}
        
        resources:
          limits:
            {% if gpu_vendor == 'nvidia' %}
            nvidia.com/gpu: {{ resources.gpu_limit | default('1') }}
            {% elif gpu_vendor == 'amd' %}
            amd.com/gpu: {{ resources.gpu_limit | default('1') }}
            {% endif %}
            memory: {{ resources.memory_limit | default('4Gi') }}
            cpu: {{ resources.cpu_limit | default('2') }}
          requests:
            memory: {{ resources.memory_request | default('2Gi') }}
            cpu: {{ resources.cpu_request | default('1') }}
        
        env:
        - name: MADENGINE_ENVIRONMENT
          value: "{{ environment | default('default') }}"
        - name: MADENGINE_REGISTRY
          value: "{{ registry | default('') }}"
        - name: MADENGINE_GPU_VENDOR
          value: "{{ gpu_vendor | default('') }}"
        - name: PYTHONPATH
          value: "/usr/local/lib/python3.8/site-packages"
        
        {% if gpu_vendor == 'nvidia' %}
        - name: NVIDIA_VISIBLE_DEVICES
          value: "{{ nvidia.visible_devices | default('all') }}"
        - name: NVIDIA_DRIVER_CAPABILITIES
          value: "{{ nvidia.driver_capabilities | default('compute,utility') }}"
        {% elif gpu_vendor == 'amd' %}
        - name: ROC_ENABLE_PRE_VEGA
          value: "{{ amd.enable_pre_vega | default('1') }}"
        - name: HIP_VISIBLE_DEVICES
          value: "{{ amd.visible_devices | default('all') }}"
        {% endif %}
        
        {% for key, value in docker_env_vars.items() %}
        - name: {{ key }}
          value: "{{ value }}"
        {% endfor %}
        
        {% if k8s.container.security_context %}
        securityContext:
          runAsUser: {{ k8s.container.security_context.run_as_user | default(0) }}
          runAsGroup: {{ k8s.container.security_context.run_as_group | default(0) }}
          privileged: {{ k8s.container.security_context.privileged | default(false) | lower }}
          {% if k8s.container.security_context.capabilities %}
          capabilities:
            add:
              {% for cap in k8s.container.security_context.capabilities.add %}
              - {{ cap }}
              {% endfor %}
          {% endif %}
        {% endif %}
        
        {% if k8s.container.health_checks %}
        livenessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - "ps aux | grep -v grep | grep python3 > /dev/null"
          initialDelaySeconds: {{ k8s.container.health_checks.liveness.initial_delay | default(30) }}
          periodSeconds: {{ k8s.container.health_checks.liveness.period | default(60) }}
          timeoutSeconds: {{ k8s.container.health_checks.liveness.timeout | default(10) }}
          failureThreshold: {{ k8s.container.health_checks.liveness.failure_threshold | default(3) }}
        
        readinessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - "test -f /config/manifest.json"
          initialDelaySeconds: {{ k8s.container.health_checks.readiness.initial_delay | default(5) }}
          periodSeconds: {{ k8s.container.health_checks.readiness.period | default(10) }}
          timeoutSeconds: {{ k8s.container.health_checks.readiness.timeout | default(5) }}
        {% endif %}
      
      volumes:
      - name: config-volume
        configMap:
          name: {{ k8s.configmap.name | default('madengine-config') }}
          defaultMode: 0755
      - name: docker-socket
        hostPath:
          path: /var/run/docker.sock
          type: Socket
      
      {% if k8s.volumes.shared_storage %}
      - name: shared-storage
        {% if k8s.volumes.shared_storage.type == 'pvc' %}
        persistentVolumeClaim:
          claimName: {{ k8s.volumes.shared_storage.claim_name }}
        {% elif k8s.volumes.shared_storage.type == 'nfs' %}
        nfs:
          server: {{ k8s.volumes.shared_storage.server }}
          path: {{ k8s.volumes.shared_storage.path }}
        {% elif k8s.volumes.shared_storage.type == 'hostPath' %}
        hostPath:
          path: {{ k8s.volumes.shared_storage.path }}
          type: {{ k8s.volumes.shared_storage.hostPath_type | default('DirectoryOrCreate') }}
        {% endif %}
      {% endif %}
      
      {% if k8s.volumes.data_storage %}
      - name: data-storage
        {% if k8s.volumes.data_storage.type == 'pvc' %}
        persistentVolumeClaim:
          claimName: {{ k8s.volumes.data_storage.claim_name }}
        {% elif k8s.volumes.data_storage.type == 'nfs' %}
        nfs:
          server: {{ k8s.volumes.data_storage.server }}
          path: {{ k8s.volumes.data_storage.path }}
        {% elif k8s.volumes.data_storage.type == 'hostPath' %}
        hostPath:
          path: {{ k8s.volumes.data_storage.path }}
          type: {{ k8s.volumes.data_storage.hostPath_type | default('DirectoryOrCreate') }}
        {% endif %}
      {% endif %}
      
      {% if k8s.node_selector %}
      nodeSelector:
        {% for key, value in k8s.node_selector.items() %}
        {{ key }}: {{ value }}
        {% endfor %}
      {% endif %}
      
      {% if k8s.tolerations %}
      tolerations:
        {% for toleration in k8s.tolerations %}
        - key: {{ toleration.key }}
          operator: {{ toleration.operator | default('Equal') }}
          {% if toleration.value %}
          value: {{ toleration.value }}
          {% endif %}
          effect: {{ toleration.effect }}
          {% if toleration.toleration_seconds %}
          tolerationSeconds: {{ toleration.toleration_seconds }}
          {% endif %}
        {% endfor %}
      {% endif %}
      
      {% if k8s.affinity %}
      affinity:
        {% if k8s.affinity.node_affinity %}
        nodeAffinity:
          {{ k8s.affinity.node_affinity | to_yaml | indent(10) }}
        {% endif %}
        {% if k8s.affinity.pod_affinity %}
        podAffinity:
          {{ k8s.affinity.pod_affinity | to_yaml | indent(10) }}
        {% endif %}
        {% if k8s.affinity.pod_anti_affinity %}
        podAntiAffinity:
          {{ k8s.affinity.pod_anti_affinity | to_yaml | indent(10) }}
        {% endif %}
      {% endif %}
